/* CMPT 332 -- Fall 2017
* Assignment 2
* Derek Perrin      dmp450 11050915
* Dominic McKeith   dom258 11184543
*/

We have a separate build directory that is architecture specific for each
s-chat executable. The user only needs to run the included s-chat shell script
after building the exectuables. It should work across different architectures.
The user can execute the executables directly from ./build/${OS}${ARCH} if they
don't want to use the script for some reason.

The first thing s-chat does when it runs is check the arguments. It makes sure 
that the user inputted three arguments only. When the arguments are done being 
parsed, it creates 5 threads, a server, input reader, message receiver, 
message printer, and a message printer.

Once everything is initialized, the server hands off control to the message 
input reader thread to grab input from the console, though the message receiver
is also waiting to receive a message. When a message is received by the message
receiver thread, it sends the message to the server. The server then sends the 
message to the message printer to print it to the console. When a user input's 
a string, the input thread sends the message to the server. The server then 
sends the message to the message sender function. The message sender function 
sends the message over the network to be received by the other computer.


Here is the pseduocode for s-chat:


RttThreadId server_id; /* server id */
RttThreadId im_id;     /* inputMessage id */
RttThreadId rm_id;     /* receiveMessage id */
RttThreadId pm_id;     /* printMessage id */
RttThreadId sm_id;     /* sendMessage id */

typedef struct thread_communication{
    char* message;
    int from;
    RttThreadId from_id;
} thread_comm;


int mainp(int argc, char* argv[]){
    int my_port, their_port;
    char* pc_name;
    
    if (argc != 4){
        printf("Incorrect number of arguments.\n");
        exit(1);
    }
    
    Parse args:
    my_port = atoi(argv[1]);
    pc_name = argv[2];
    their_port = atoi(argv[3]);

    {
        Create server thread.
    }
    {
        Create send message thread.
    }
    {
        Create print message thread.
    }
    {
        Create receive Message thread.
    }
    {
        Create input message thread.
    }
    return 0;
}


/* Read in a message fromt he keyboard and send it to the server */
void inputMessage(void){
    char* input,* message/*, *send_message*/;
    int message_length, input_size;
    /*u_int* received_message_length;*/
    thread_comm* message_to_send/*,* message_to_receive*/;
    
    printf("I am the message inputter.\n");
    
    input = malloc(sizeof(char)*MAX_MESSAGE_SIZE);
    im_id = RttMyThreadId();
    
    /*
    while (1) {
        rttsleep(1)
        inputsize = read();
        if inputsize > 0
            do shit
    }*/
        
    
    /* constantly read in from the console */
    for(;;){
        RttSleep(1);
        input_size = read(0, input, MAX_MESSAGE_SIZE);
        if (input_size < 1)
            continue;
        
        printf("Here is your message: %s\n", input);
        
        /* parse the input into a struct */
        message_length = strlen(input) + 1;
        message = malloc(sizeof(char) * (message_length));
        message_to_send = malloc(sizeof(thread_comm));
        /*strncpy(message_to_send->message, input, message_length);*/
        message_to_send->from = 1;
        message_to_send->from_id = im_id;
        
        RttSend(server_id, message, message_length, NULL, NULL);
        
        free(message);
        free(message_to_send);
    }
    
    RttExit();
}

/* Recieve a message from the network and send it to the server */
void receiveMessage(void){
    rm_id = RttMyThreadId();
    /* TODO: Implement whatever this does */
    printf("I am the message reciever\n");
    RttExit();
}

/* grab a message from the server that was placed there by receiveMessage and
 * print it to the console
 */
void printMessage(void){
    pm_id = RttMyThreadId();
    /* TODO: Implement this to print stuff to screen */
    printf("I am the message printer\n");
    RttExit();
}

/* Grab a message from the server that was put there by inputMessage and send
 * it over the network to the destination address
 */
void sendMessage(void){
    sm_id = RttMyThreadId();
    /* TODO: Implement whatever this does too */
    printf("I am the message sender\n");
    RttExit();
}

int mainp(int argc, char* argv[]){
    int my_port, their_port;
    char* pc_name;
    
    if (argc != 4){
        printf("Incorrect number of arguments.\n");
        exit(1);
    }
    
    Parse args:
    my_port = atoi(argv[1]);
    pc_name = argv[2];
    their_port = atoi(argv[3]);

    {
        Create server thread.
    }
    {
        Create send message thread.
    }
    {
        Create print message thread.
    }
    {
        Create receive Message thread.
    }
    {
        Create input message thread.
    }
    return 0;
}
void server(void){
    LIST* incoming,* outgoing;
    RttThreadId from;
    thread_comm* received_message;
    u_int* message_size;
    printf("I am the server\n");
    
    /* First, setup the queues for incomming and outgoing messages */
    /* setup the queue for incomming messages */
    incoming = ListCreate();
    outgoing = ListCreate();
    received_message = malloc(sizeof(thread_comm));
    message_size = malloc(sizeof(u_int));
    *message_size = sizeof(thread_comm);
    
    for(;;){
        /* recieve the message */
        /* TODO: check return value of RttReceive */
        if (RttReceive(&from, received_message, message_size) != RTTOK){
            printf("A server error has occured when receiving a message.\n");
            continue;
        }
        switch(received_message->from){
            case 0: /* Message is from server */
                printf("Error: Server received message from itself!\n");
                break;
            case 1: /* Message is from inputMessage */
                printf("Server received message from inputMessage.\n");
                ListLast(outgoing);
                ListAdd(outgoing, received_message->message);
                /* TODO: check return value of ListAdd */
                break;
            case 2: /* Message is from receiveMessage */
                printf("Server received message from receiveMessage.\n");
                ListLast(incoming);
                ListAdd(incoming, received_message->message);
                break;
            case 3: /* Message is from printMessage */
                printf("Error: server should not be receiving messages "
                       "from printMessage.\n");
                break;
            case 4: /* Message is from sendMessage */
                printf("Server received message from sendMessage.\n");
                break;
            default:
                printf("Error: server received message from unknown source"
                       ".\n");
                break;
        }
        /* When the server is done receiving messages, then send a message 
           to a local thread if there is one in the queue */
        if (ListCount(outgoing) > 0){
            /* send a message to printMessage and remove node from 
               Queue/List */
            ListFirst(outgoing);
            printf("A message is waiting to be sent to the the client\n");
        }
    }
    RttExit();
}




